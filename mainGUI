import customtkinter as ctk
import cv2
from PIL import Image, ImageTk
from moviepy.editor import VideoFileClip, AudioFileClip
import sounddevice as sd
import numpy as np
from scipy.io.wavfile import write

def button_callback():
    print("button pressed")

class App(ctk.CTk):
    def __init__(self):
        ID = "Oussema"  # to be programmed with RFID
        super().__init__()
        self.title("my app")
        self.geometry("1920x1080")

        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(0, weight=1)

        self.main_frame = ctk.CTkFrame(self)
        self.main_frame.grid(row=1, column=0, padx=10, pady=10, sticky="n")
        self.main_frame.columnconfigure(0, weight=1)
        self.main_frame.rowconfigure(0, weight=1)
        self.main_frame.configure(fg_color="transparent", bg_color="transparent")

        self.cap = cv2.VideoCapture(0)

        self.label = ctk.CTkLabel(self.main_frame, text=f"Bonjour Docteur {ID}", fg_color="transparent", font=("Serif", 50), height=50)
        self.label.grid(sticky="new")
        self.label.pack(side="top", padx=10, pady=10)

        self.canvas = ctk.CTkCanvas(self.main_frame, width=630, height=400)
        self.canvas.pack(side="left", padx=10, pady=10)

        self.button_frame = ctk.CTkFrame(self.main_frame)
        self.button_frame.pack(side="right", padx=10, pady=300)
        self.button_frame.configure(fg_color="transparent", bg_color="transparent", width=500)

        self.button_1 = ctk.CTkButton(self.button_frame, text="Consulter mon profil", font=("Serif", 33), command=button_callback, width=33, height=33)
        self.button_1.pack(padx=200, pady=(10, 10))

        self.button_2 = ctk.CTkButton(self.button_frame, text="Faire capture photo", font=("Serif", 33), command=self.capture_photo, width=33, height=33)
        self.button_2.pack(padx=200, pady=(10, 10))

        self.button_3 = ctk.CTkButton(self.button_frame, text="Faire capture vid√©o", font=("Serif", 33), width=33, command=self.capture_video, height=33)
        self.button_3.pack(padx=200, pady=(10, 10))

        self.photo = None
        self.out = None
        self.recording = False
        self.update()

    def update(self):
        ret, frame = self.cap.read()
        if ret:
            flipped_frame = cv2.flip(frame, 1)
            rgb_frame = cv2.cvtColor(flipped_frame, cv2.COLOR_BGR2RGB)
            self.photo = ImageTk.PhotoImage(image=Image.fromarray(rgb_frame))
            self.canvas.create_image(0, 0, anchor="nw", image=self.photo)

            if self.recording and self.out is not None:
                self.out.write(flipped_frame)
        self.after(10, self.update)

    def capture_photo(self):
        ret, frame = self.cap.read()
        if ret:
            flipped_frame = cv2.flip(frame, 1)
            image = Image.fromarray(cv2.cvtColor(flipped_frame, cv2.COLOR_BGR2RGB))
            image.save("C:/Users/benam/Desktop/test_folder/captured_image.png")

    def capture_video(self):
        if not self.recording:
            print("Start recording video")
            fourcc = cv2.VideoWriter_fourcc(*'XVID')
            self.out = cv2.VideoWriter("C:/Users/benam/Desktop/test_folder/captured_video.mp4", fourcc, 20.0, (640, 480))

            self.audio_frames = []
            self.audio_stream = sd.InputStream(callback=self.audio_callback)
            self.audio_stream.start()

            self.recording = True
        else:
            print("Stop recording video")
            self.out.release()

            self.audio_stream.stop()
            self.audio_stream.close()

            audio_data = np.concatenate(self.audio_frames, axis=0)
            write("C:/Users/benam/Desktop/test_folder/audio.mp3", 44100, audio_data)

            video_clip = VideoFileClip("C:/Users/benam/Desktop/test_folder/captured_video.mp4")

            audio_clip = AudioFileClip("C:/Users/benam/Desktop/test_folder/audio.mp3")

            video_clip = video_clip.subclip(0, audio_clip.duration)
            video_with_audio = video_clip.set_audio(audio_clip)

            video_with_audio.write_videofile("C:/Users/benam/Desktop/test_folder/captured_video_including_audio.mp4", codec='libx264', audio_codec='aac')

            self.recording = False

    def audio_callback(self, indata, frames, time, status):
        if status:
            print(status, flush=True)
        self.audio_frames.append(indata.copy())

# Create an instance of the app class
app = App()

# Run the Tkinter event loop
app.mainloop()
