<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Contour Detection</title>
    <script src="https://docs.opencv.org/3.4.0/opencv.js"></script>
    <style>
        body {
            margin: 0;
            padding: 0;
            height: 100vh;
            display: flex;
        }

        #left-frame{
            flex: 1; /* 1 part of the total 3 parts */
            padding: 10px;
            box-sizing: border-box;
            background-color: #dddddd;
            border: 4px solid black;
        }

        #right-frame {
            flex: 2;
            padding: 10px;
            box-sizing: border-box;
            background-color: #dddddd;
            border: 4px solid black;
        }

        canvas {
            border: 1px solid black;
            max-width: 100%;
            height: auto;
        }

        #message-container {
            margin-top: 10px;
            text-align: center;
        }

        button,
        input[type="file"],
        input[type="text"],
        textarea {
            background-color: #007bff;
            color: #ffffff;
            font-size: 12.5px; /* Reduced font size to 8px */
            padding: 12.5px 1px; /* Reduced padding for shorter buttons */
            border: none;
            cursor: pointer;
            border-radius: 5px;
            margin: 10px 0; /* Increased margin for better spacing */
            width: calc(100% - 32px);
        }

        button:hover,
        input[type="file"]:hover,
        input[type="text"]:hover,
        textarea:hover {
            background-color: #0056b3;
        }

        button:disabled,
        input[type="file"]:disabled {
            background-color: #c0c0c0;
            /* Grey color */
            color: #808080;
            /* Lighter grey for text */
            cursor: not-allowed;
        }

        .slider-container {
            display: flex;
            align-items: center;
            margin-top: 10px;
        }

        .slider-container input {
            flex-grow: 1;
            margin: 0 10px;
        }

        /* Styling for title input and paragraph textarea */
        #title-input,
        #paragraph-input {
            background-color: #d3d3d3;
            color: #ffffff;
            padding: 8px;
            cursor: text
        }

    </style>
</head>
<body>
    <div id="left-frame">
        <input type="file" id="file-input" accept="image/*">
        <div class="slider-container">
            <label for="threshold-slider">Threshold:</label>
            <input type="range" id="threshold-slider" min="0" max="255" value="255">
            <span id="threshold-value">255</span>
        </div>
        <button id="show-contours-button">Show Contours</button>
        <button id="select-contour-button" disabled>Select Contour</button>
        <button id="draw-contour-button">Draw Contour</button>
        <button id="end-draw-button" disabled>End Draw</button>
        <button id="calculate-distance-button">Calculate Distance</button>
        <input type="text" id="title-input" placeholder="Enter Title">
        <textarea id="paragraph-input" rows="4" placeholder="Enter Paragraph"></textarea>
        <button id="save-button">Save Image and Text</button>
        <p id="status-label"></p>
    </div>
    <div id="right-frame">
        <canvas id="canvas"></canvas>
        <div id="message-container"></div>
    </div>

    <script>
        let image = null;
        let contours = [];
        let selectedContour = null;
        let drawnContour = [];
        let scale = 1.0;
        let canvas = document.getElementById('canvas');
        let ctx = canvas.getContext('2d');
        let statusLabel = document.getElementById('status-label');
        let messageContainer = document.getElementById('message-container');

        document.getElementById('file-input').addEventListener('change', openImage);
        document.getElementById('show-contours-button').addEventListener('click', detectAndDisplayContours);
        document.getElementById('select-contour-button').addEventListener('click', selectContour);
        document.getElementById('draw-contour-button').addEventListener('click', drawContour);
        document.getElementById('end-draw-button').addEventListener('click', endDraw);
        document.getElementById('calculate-distance-button').addEventListener('click', calculateDistance);
        document.getElementById('save-button').addEventListener('click', saveImageAndText);

        const thresholdSlider = document.getElementById('threshold-slider');
        const thresholdValueLabel = document.getElementById('threshold-value');

        thresholdSlider.addEventListener('input', function() {
            thresholdValueLabel.textContent = thresholdSlider.value;
            if (image) {
                applyThresholdAndDisplay();
            }
        });

        function openImage(event) {
            let file = event.target.files[0];
            if (file) {
                let reader = new FileReader();
                reader.onload = function(e) {
                    let img = new Image();
                    img.onload = function() {
                        canvas.width = img.width;
                        canvas.height = img.height;
                        ctx.drawImage(img, 0, 0);
                        image = cv.imread(img);
                        document.getElementById('show-contours-button').disabled = false;
                        isshow = false;
                        applyThresholdAndDisplay();
                    }
                    img.src = e.target.result;
                }
               
                reader.readAsDataURL(file);
            }
        }

        var isshow = false;
        function detectAndDisplayContours() {
            if (!isshow) {
                applyThresholdAndDisplay();
                document.getElementById('select-contour-button').disabled = false;
                document.getElementById('draw-contour-button').disabled = false;
                document.getElementById('calculate-distance-button').disabled = false;
                isshow = true;
            }
        }

        function applyThresholdAndDisplay() {
            let gray = new cv.Mat();
            cv.cvtColor(image, gray, cv.COLOR_RGBA2GRAY);

            // Apply thresholding
            let thresholdValue = parseInt(thresholdSlider.value);
            let maxValue = 255;
            let thresh = new cv.Mat();
            cv.threshold(gray, thresh, thresholdValue, maxValue, cv.THRESH_BINARY);

            let edges = new cv.Mat();
            cv.Canny(thresh, edges, 100, 200);
            contours = new cv.MatVector();
            let hierarchy = new cv.Mat();
            cv.findContours(edges, contours, hierarchy, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE);
            let imageCopy = image.clone();
            for (let i = 0; i < contours.size(); ++i) {
                cv.drawContours(imageCopy, contours, i, new cv.Scalar(0, 255, 0, 255), 2);
            }
            cv.imshow('canvas', imageCopy);
            gray.delete();
            thresh.delete();
            edges.delete();
            hierarchy.delete();
            imageCopy.delete();
        }

        function selectContour() {
            canvas.addEventListener('click', onClick);
            showMessage("Click on a contour to select it.");
        }

        var newSelectedContour = null;
        function onClick(event) {
            let rect = canvas.getBoundingClientRect();
            let x = event.clientX - rect.left;
            let y = event.clientY - rect.top;
            for (let i = 0; i < contours.size(); ++i) {
                let contour = contours.get(i);
                if (cv.pointPolygonTest(contour, new cv.Point(x, y), false) >= 0) {
                    if (newSelectedContour) {
                        if (selectedContour) {
                            // Delete the previously selected contour
                            let image = cv.imread('canvas');
                            for (let i = 0; i < contours.size(); ++i) {
                                if (contours.get(i) !== selectedContour) {
                                    cv.drawContours(image, contours, i, new cv.Scalar(0, 255, 0, 255), 2);
                                }
                            }
                            cv.imshow('canvas', image);
                        }
                    }
                    newSelectedContour = contour;
                    selectedContour = newSelectedContour;
                    let image = cv.imread('canvas');
                    cv.drawContours(image, contours, i, new cv.Scalar(255, 0, 0, 255), 2);
                    cv.imshow('canvas', image);
                    canvas.removeEventListener('click', onClick);

                    // Calculate the area of the selected contour
                    let pixelsInside = cv.contourArea(selectedContour);
                    let areaInCm2 = pixelsInside / (scale * scale);
                    let statusMessage = `Contour selected. Area: ${areaInCm2.toFixed(2)} cmÂ²`;
                    statusLabel.textContent = statusMessage;
                    break;
                }
            }
        }

        function drawContour() {
            canvas.addEventListener('click', onDrawClick);
            showMessage("Click to draw points for the contour.");
        }

        function onDrawClick(event) {
            let rect = canvas.getBoundingClientRect();
            let x = event.clientX - rect.left;
            let y = event.clientY - rect.top;
            drawnContour.push({ x: x, y: y });

            // Draw the point on the canvas
            ctx.fillStyle = 'red';
            ctx.beginPath();
            ctx.arc(x, y, 3, 0, 2 * Math.PI);
            ctx.fill();
            ctx.closePath();
        }

        function endDraw() {
            canvas.removeEventListener('click', onDrawClick);
            showMessage("Contour drawing ended.");
            if (drawnContour.length > 0) {
                // Draw the contour on the canvas
                ctx.strokeStyle = 'blue';
                ctx.lineWidth = 2;
                ctx.beginPath();
                ctx.moveTo(drawnContour[0].x, drawnContour[0].y);
                for (let i = 1; i < drawnContour.length; i++) {
                    ctx.lineTo(drawnContour[i].x, drawnContour[i].y);
                }
                ctx.closePath();
                ctx.stroke();
            }
        }

        function calculateDistance() {
            if (drawnContour.length < 2) {
                alert("Please draw at least two points to calculate the distance.");
                return;
            }

            let dx = drawnContour[1].x - drawnContour[0].x;
            let dy = drawnContour[1].y - drawnContour[0].y;
            let distanceInPixels = Math.sqrt(dx * dx + dy * dy);
            let distanceInCm = distanceInPixels / scale;

            showMessage(`Distance: ${distanceInCm.toFixed(2)} cm`);
        }

        function saveImageAndText() {
            let title = document.getElementById('title-input').value;
            let paragraph = document.getElementById('paragraph-input').value;

            // Draw the title and paragraph on the canvas
            ctx.font = '16px Arial';
            ctx.fillStyle = 'black';
            ctx.fillText(title, 10, 20);
            ctx.fillText(paragraph, 10, 40);

            // Save the image with the text
            let link = document.createElement('a');
            link.href = canvas.toDataURL('image/png');
            link.download = 'image_with_text.png';
            link.click();
        }

        function showMessage(message) {
            let messageElement = document.createElement('p');
            messageElement.textContent = message;
            messageContainer.appendChild(messageElement);

            // Automatically remove the message after 3 seconds
            setTimeout(() => {
                messageElement.remove();
            }, 3000);
        }
    </script>
</body>
</html>
